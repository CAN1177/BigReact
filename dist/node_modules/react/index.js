(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

	// 为了防止滥用react,所以定义为symbol类型 https://zhuanlan.zhihu.com/p/297923315
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.elememt')
	    : 0xeac7;

	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        key,
	        ref,
	        type,
	        props,
	        __mark: '21Silva'
	    };
	    return element;
	};
	function isValidElement$1(object) {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	}
	const jsx = (type, config, ...maybeChildren) => {
	    // config中的配置
	    let key = null;
	    const props = {};
	    let ref = null;
	    // 处理Config
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    // 处理maybeChildren
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildren) {
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	/**
	 * 当前使用hooks的集合
	 */
	const currentDispatcher = {
	    current: null
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        throw new Error('hooks 只能在函数组件中使用');
	    }
	    return dispatcher;
	};

	// 在react中暴露出去useState方法
	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	// 内部数据共享层（内部神秘属性，不要乱用！否则你会被炒鱿鱼。）
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
	    currentDispatcher
	};
	const version = '0.0.0';
	const createElement = jsx;
	const isValidElement = isValidElement$1;
	// export default {
	// 	version: '0.0.0',
	// 	createElement: jsxDEV
	// };

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.useState = useState;
	exports.version = version;

}));
